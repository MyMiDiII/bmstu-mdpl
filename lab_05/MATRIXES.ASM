PUBLIC READ_ROWS
PUBLIC READ_COLS
PUBLIC READ_MATRIX
PUBLIC TRANSFORM_MATRIX
PUBLIC WRITE_MATRIX

DATASEG SEGMENT COMMON 'DATA'
    ROWS_MSG DB 'Enter matrix rows: $'
    COLS_MSG DB 'Enter matrix columns: $'
    MATRIX_MSG DB 'Enter matrix:', 13, 10, '$'
    OUT_MATRIX_MSG DB 'Transformed matrix:', 13, 10, '$'
    ROWS DB 0
    COLS DB 0
    TMP_BX DW 0
    TMP_CX DW 0
    MATRIX DB 9 * 9 DUP(0)
DATASEG ENDS

CODESEG SEGMENT PARA PUBLIC 'CODE'
    ASSUME    CS:CODESEG, DS:DATASEG
READ_DIGIT PROC NEAR
    MOV AH, 01
    INT 21h
    SUB AL, '0'

    RET
READ_DIGIT ENDP

WRITE_SYMB PROC NEAR
    MOV AH, 02
    INT 21h

    RET
WRITE_SYMB ENDP

NEW_LINE PROC NEAR
    MOV DL, 13
    CALL WRITE_SYMB
    MOV DL, 10
    CALL WRITE_SYMB

    RET
NEW_LINE ENDP

SPACE PROC NEAR
    MOV DL, ' '
    CALL WRITE_SYMB

    RET
SPACE ENDP

MSG_OUT PROC NEAR
    MOV AX, DATASEG
    MOV DS, AX

    MOV AH, 09
    INT 21h

    RET
MSG_OUT ENDP

READ_ROWS PROC FAR
    MOV DX, OFFSET ROWS_MSG
    CALL MSG_OUT

    CALL READ_DIGIT 
    MOV ROWS, AL
    CALL NEW_LINE

    RET
READ_ROWS ENDP

READ_COLS PROC FAR
    MOV DX, OFFSET COLS_MSG
    CALL MSG_OUT

    CALL READ_DIGIT 
    MOV COLS, AL
    CALL NEW_LINE

    RET
READ_COLS ENDP

READ_MATRIX PROC FAR
    MOV DX, OFFSET MATRIX_MSG
    CALL MSG_OUT

    MOV CX, 0
    MOV CL, ROWS
    MOV SI, 0
BY_ROW:
    MOV BX, CX
    MOV CL, COLS

    BY_COLUMN:
        CALL READ_DIGIT
        MOV MATRIX[SI], AL
        INC SI
        CALL SPACE

        LOOP BY_COLUMN

    CALL NEW_LINE

    MOV AX, 9
    SUB AL, COLS
    ADD SI, AX
    MOV CX, BX

    LOOP BY_ROW

    RET
READ_MATRIX ENDP

TRANSFORM_MATRIX PROC FAR
    MOV BX, 0
    ADD BL, COLS
    SUB BX, 1

    CMP COLS, 1
    JE EXIT

    MOV CX, 0
    MOV CL, COLS
    SUB CX, 1
BY_COLUMN:
    MOV TMP_CX, CX
    MOV TMP_BX, BX

    MOV CX, 0
    MOV CL, ROWS

    BY_ROW:
        CMP MATRIX[BX], 0
        JE COL_MOVE

        ADD BX, 9
        
        LOOP BY_ROW

    MOVED:

    MOV CX, TMP_CX
    MOV BX, TMP_BX 
    SUB BX, 1

    LOOP BY_COLUMN

    EXIT:
    RET

COL_MOVE:
    MOV DI, CX
    MOV CX, 0
    MOV CL, ROWS

    MOV AX, BX
    MOV DX, 0
    MOV DL, 9
    DIV DL
    MOV DL, AH
    MOV SI, DX

    BEGIN:
        MOV DL, MATRIX[SI - 1] 
        MOV MATRIX[SI], DL
        ADD SI, 9
        LOOP BEGIN

    MOV CX, DI

    JMP MOVED

TRANSFORM_MATRIX ENDP

WRITE_MATRIX PROC FAR
    MOV DX, OFFSET OUT_MATRIX_MSG
    CALL MSG_OUT

    MOV CX, 0
    MOV CL, ROWS
    MOV SI, 0
BY_ROW:
    MOV BX, CX
    MOV CL, COLS

    BY_COLUMN:
        MOV DL, MATRIX[SI] 
        ADD DL, '0'
        CALL WRITE_SYMB
        INC SI
        CALL SPACE

        LOOP BY_COLUMN

    CALL NEW_LINE
    MOV CX, BX

    MOV AX, 9
    SUB AL, COLS
    ADD SI, AX

    LOOP BY_ROW

    RET
WRITE_MATRIX ENDP

CODESEG ENDS
END
